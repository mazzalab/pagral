# os: windows

# version format
version: 0.1.{build}

branches:
  only:
    - master

only_commits:
  message: /\[build\]/

environment:
  PYTHON_VERSION: 3.7

  matrix:
    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
      MINICONDA: "C:\\Miniconda37"
      WINKITS: "C:\\Program Files (x86)\\Windows Kits\\8.0\\bin\\x86"
      platform: x32
#    - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
#      MINICONDA: "C:\\Miniconda37-x64"
#      WINKITS: "C:\\Program Files (x86)\\Windows Kits\\8.0\\bin\\x64"
#      platform: x64
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
#      platform: x64
#      MINICONDA: /home/appveyor/Miniconda37-x64
#      MINICONDA_REPO: https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.3-Linux-x86_64.sh
#
#    - APPVEYOR_BUILD_WORKER_IMAGE: macOS
#      platform: x64
#      MINICONDA: /Users/appveyor/Miniconda37-x64
#      MINICONDA_REPO: https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.3-MacOSX-x86_64.sh

init:
  - ps: |
      if ($isMacOS) {
        brew install wget
      }
#   -  cmd: ECHO %PYTHON_VERSION% %MINICONDA%
#   - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

install:
  - sh: wget $MINICONDA_REPO -O ~/miniconda.sh
  - sh: bash ~/miniconda.sh -b -p $MINICONDA

  - cmd: set PATH=%MINICONDA%;%MINICONDA%\\Scripts;%WINKITS%;%PATH%
  - cmd: activate.bat

  - sh: source $MINICONDA/bin/activate
  - sh: conda init

  - cmd: set PYTHONUNBUFFERED=1
  - sh: PYTHONUNBUFFERED=1

  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda config --set show_channel_urls true
  - conda config --add channels conda-forge
  - conda install -c conda-forge setuptools wheel conda-build anaconda-client conda-verify cython numpy=1.19.1 --yes --quiet

build: off

build_script:
  # Build the Cython extension
  - cmd: ECHO build_script here!
  # - cmd: python setup.py build_ext --inplace

test_script:
  - cmd: ECHO tests here!
  # Run the project tests and store results in .xml log
  #  - ps: |
  #      # this produces nosetests.xml which is uploaded on_finish
  #      &$env:PYTHON\python setup.py nosetests --with-xunit
  #      if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

after_test:
  - which python
#  - python setup.py bdist_wheel -d pypi_dist clean --all --version %APPVEYOR_BUILD_VERSION%
#  - ps: "ls pypi_dist"
  - conda build --quiet -c conda-forge conda-recipe --output-folder conda_dist
  - ps: "ls conda_dist"

artifacts:
  - path: conda_dist\**\*.tar.bz2
  - path: pypi_dist\*.whl

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#

# on_finish:
  # - sh: export APPVEYOR_SSH_BLOCK=true
  # - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -

  # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  # Upload test results to AppVeyor
  #  - ps: |
  #    # this uploads nosetests.xml produced in test_script step
  #    $wc = New-Object 'System.Net.WebClient'
  #    $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path .\nosetests.xml))